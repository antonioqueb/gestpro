generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sales {
  id        Int       @id @default(autoincrement())
  products  Product[]
  createdAt DateTime  @default(now())



  // RELATIONS
  sellerId Int
  seller   User     @relation(fields: [sellerId], references: [id])
  companyId Int?
  //company   Company @relation(fields: [companyId], references: [id])
  

  
  

  @@map("sales_${sellerId}")
}


model Company {
  id        Int    @id @default(autoincrement())
  name      String
  users     User[]
  currency  String
  taxId     String // Equivalent to 'RFC'
  address   String
  phone     String
  email     String
  website   String
  logo      String 
  description String
  tagLine String
  employees String


  // RELATIONS
  //sales     Sales[] 
  //company   Sales? @relation(fields: [companyId], references: [id])


}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  username  String?   @unique
  email     String    @unique
  password  String 
  createdAt DateTime  @default(now())
  ventas    Sales[]
  apiKey    String    @unique @default(cuid())
  role          String    @default("user")
  isActive      Boolean   @default(true)
  profilePicture String?
  phoneNumber   String?
  address       String?
  companyId     Int?
  department    String?
  jobTitle      String?
  license       String  @default("free")
  company       Company?  @relation(fields: [companyId], references: [id])

}

model Product {
  id            Int       @id @default(autoincrement())
  sku           String    @unique  // Código único de producto
  name          String    @db.VarChar(255)  // Nombre del producto
  description   String?   // Descripción detallada del producto
  brand         String?   // Marca del producto
  model         String?   // Modelo del producto (si aplica)
  category      String?   // Categoría a la que pertenece el producto
  tags          String[]  // Etiquetas para facilitar la búsqueda
  cost          Float     // Costo de adquisición del producto
  price         Float     // Precio de venta del producto
  stock         Int       // Stock actual del producto
  stockMin      Int       // Stock mínimo para reabastecimiento
  stockMax      Int       // Stock máximo para evitar sobrestock
  weight        Float     // Peso del producto
  dimensions    String?   // Dimensiones del producto (ej. largo x ancho x alto)
  images        String[]  // URLs de imágenes del producto
  status        String    @default("active") // Estado del producto (activo, inactivo, descontinuado)
  ventaId       Int?      // Relación con la venta (si se desea asociar a una venta específica)
  venta         Sales?   @relation(fields: [ventaId], references: [id])
  supplierId    Int       // Relación con el proveedor del producto
  supplier      Supplier  @relation(fields: [supplierId], references: [id])
}

model Supplier {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(255)  // Supplier name
  businessName  String?   // Supplier's business name
  rfc           String?   // Registro Federal de Contribuyentes (Mexico)
  personType    String?   // Type of person (individual, legal entity)
  contact       String?   // Main contact name
  phone         String?   // Phone number
  email         String?   // Email address
  address       String?   // Supplier address
  country       String?   // Supplier country
  state         String?   // State or province of the supplier
  city          String?   // Supplier city
  postalCode    String?   // Supplier postal code
  website       String?   // Supplier website
  notes         String?   // Additional notes about the supplier
  active        Boolean   @default(true) // Indicates if the supplier is active
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]   // Agregar relación inversa
}


model Purchase {
  id           Int         @id @default(autoincrement())
  supplierId   Int         @map("supplier_id")  // Relación con Proveedor
  purchaseDate DateTime    @default(now()) 
  invoiceNumber String?     // Número de factura (puede ser único)
  status       String      @default("pending") // Estado de la compra (pendiente, recibida, cancelada, etc.)
  notes        String?     // Notas adicionales
  companyId    Int?        // Relación con Empresa
  products     PurchaseProduct[]  
}

model PurchaseProduct {
  id           Int      @id @default(autoincrement())
  purchaseId   Int      @map("purchase_id")
  purchase     Purchase @relation(fields: [purchaseId], references: [id])
  productId    Int      @map("product_id")
  unitCost     Float    // Costo unitario 
} 


model Inventory {
  id         Int      @id @default(autoincrement())
  productId  Int      @map("product_id")
  quantity   Int      // Cantidad en existencia
  companyId  Int?     // Relación con Empresa
}

model Customer {
  id            Int          @id @default(autoincrement())
  name          String       // Nombre o razón social del cliente
  contactName   String?      // Nombre de contacto
  email         String       @unique
  phoneNumber   String?
  address       String?
  taxId         String?      //  Identificación fiscal (RFC en México)
  companyId     Int?         
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Invoice {
  id             Int          @id @default(autoincrement())
  customerId     Int          @map("customer_id")
  invoiceNumber  String       @unique // Número de factura único
  invoiceDate    DateTime     @default(now())
  dueDate        DateTime     
  subtotal       Float         
  tax            Float         
  total          Float  
  status         String       @default("pending") // pendiente, pagada, anulada, etc.  
  notes          String?     
  companyId      Int?

  lineItems      InvoiceLineItem[]    
}

model InvoiceLineItem {
  id           Int        @id @default(autoincrement())
  invoiceId    Int        @map("invoice_id")
  invoice      Invoice    @relation(fields: [invoiceId], references: [id])
  productId    Int?       @map("product_id")      // Si se factura un producto
  description  String     // Descripción de la línea 
  quantity     Int
  unitPrice    Float       
  amount       Float   
}

model Payment {
    id              Int         @id @default(autoincrement())
    customerId      Int         @map("customer_id")
    invoiceId       Int         @map("invoice_id")
    paymentDate     DateTime    @default(now())
    amount          Float   
    paymentMethod   String       
    referenceNumber String?     
}